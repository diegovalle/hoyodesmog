# Install nginx

- name: add apt-key
  shell: curl https://nginx.org/keys/nginx_signing.key | /usr/bin/apt-key add -

- name: modify repository
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "deb http://nginx.org/packages/mainline/ubuntu/ {{ansible_distribution_release}} nginx"
    - "deb-src http://nginx.org/packages/mainline/ubuntu/ {{ansible_distribution_release}} nginx"

- name: install openssl
  apt:
    name: openssl
    state: present

- name: Install nginx
  apt:
    name: nginx
    state: present
    force: yes
  notify: Restart nginx

- name: Ensure that nginx snippets dir exists
  file:
    path: "/etc/nginx/snippets/"
    state: directory
    owner: "root"
    group: "root"
    mode: "0644"

- name: Generate useful snippets
  copy:
    src: "{{ item }}"
    dest: "/etc/nginx/snippets/{{ item }}"
  with_items:
    - referral-spam.conf
    - acme-challenge.conf
  notify: Restart nginx


- name: Copy over h5bp configuration
  copy: src={{ item }} dest=/etc/nginx/{{ item }}
  with_items:
    - h5bp/
    - mime.types

- name: copy nginx.conf
  template:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 0644
  notify: Restart nginx

- name: verify /etc/nginx/sites-enabled/ exists
  file: path=/etc/nginx/sites-enabled/ state=directory owner=root group=root mode=0700

- name: Copy over website configuration
  copy: src={{ item }} dest=/etc/nginx/sites-enabled/{{ item }}
  with_items:
    - ssl.no-default
    - no-default
  notify: Restart nginx

# SSL
- name: create group
  group:
    name: '{{ letsencrypt_group }}'

- name: create group
  group:
    name: '{{ nginx_user }}'
    system: yes

- name: create user
  user:
    name: '{{ letsencrypt_user }}'
    groups: '{{ letsencrypt_group }},{{ nginx_user }}'
    shell: /bin/bash
    home: /home/{{ letsencrypt_user }}

- name: Ensure letencrypt home directory exists
  file: path=/home/{{ letsencrypt_user }}/ssl state=directory owner={{ letsencrypt_user }}  mode=0660 recurse=yes


- name: copy scripts to create csr and renew the cert
  copy: src={{ item }} dest=/home/{{ letsencrypt_user }}/ssl/{{ item }} owner={{ letsencrypt_user }} mode=0775
  with_items:
    - create_csr.sh
    - renew_cert.sh

- name: create challenges directory
  file:
    path: /var/www/challenges
    state: directory
    owner: '{{ letsencrypt_user }}'
    group: '{{ nginx_user }}'

- name: create hoyodesmog ssl certs directory
  file:
    path: /etc/nginx/ssl/hoyodesmog.diegovalle.net/
    state: directory
    owner: root
    group: '{{ letsencrypt_user }}'
    mode: 0660

- name: create default ssl certs directory
  file:
    path: /etc/nginx/ssl/default/
    state: directory
    owner: root
    group: '{{ letsencrypt_user }}'
    mode: 0660

- name: create challenges directory
  file:
    path: /var/www/challenges
    state: directory
    owner: '{{ letsencrypt_user }}'
    group: '{{ nginx_user }}'

- name: letsencrypt user has permission to restart nginx
  lineinfile:
    'dest=/etc/sudoers
    line="{{ letsencrypt_user }}  ALL=NOPASSWD: /usr/sbin/nginx -s reload"
    state=present
    validate="visudo -cf %s"'

- name: generate 2048 dhparam
  command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 creates=/etc/nginx/ssl/dhparam.pem
  notify: Restart nginx

- name: Generate self-signed certificates for the default site
  shell: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/default/nginx.key -out /etc/nginx/ssl/default/nginx.crt   -subj "/C=US/ST=CA/O=example.com/CN=example.com"
  when: testing == 'true'
  notify: Restart nginx

- name: Copy over self-signed certificates
  when: testing == 'true'
  copy: src={{ item }} dest=/etc/nginx/ssl/hoyodesmog.diegovalle.net/{{ item }}
  with_items:
    - chained.pem
    - domain.key
  notify: Restart nginx

- name: Copy over letsencrypt certs
  when: testing == 'false'
  copy: content={{ item.src }} dest=/{{ item.dest }}
  with_items:
    - {src: "{{domain_csr}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/domain.csr}
    - {src: "{{account_key}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/account.key}
    - {src: "{{domain_key}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/domain.key}
    - {src: "{{chained_pem}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/chained.pem}
  notify: Restart nginx

    # - name: Generate letsencrypt certificates
    #   when: testing == 'false'
    #   shell: /home/{{ letsencrypt_user}}/ssl/renew_cert.sh hoyodesmog.diegovalle.net
    #   notify: Restart nginx

- name: letsencrypt user has permission to restart nginx
  lineinfile:
    'dest=/etc/sudoers
    line="{{ letsencrypt_user }} ALL=NOPASSWD: /usr/sbin/nginx -s reload"
    state=present
    validate="visudo -cf %s"'
