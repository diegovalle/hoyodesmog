# ansible-playbook playbook.yml --ask-vault-pass

---
- hosts: all
  gather_facts: False

  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)

- hosts: hoyodesmog
  vars:
    testing: 'false'
    deploy_user_name: deploy
    deploy_public_keys:
      - vps.pub
    r_repository:
      - type: deb
        url: "http://cran.rstudio.com/bin/linux/ubuntu  {{ ansible_distribution_release }}/"
    nginx_user: www-data
    access_log: /var/log/nginx/access.log
    error_log: /var/log/nginx/error.log
    letsencrypt_user: letsencrypt
    letsencrypt_group: letsencrypt
    letsencrypt_cronjob_daysofmonth: 1

  tasks:
    - name: Load secrets
      when: testing != 'true'
      include_vars: secrets.yml
      no_log: true

    - name: Load secrets (test version)
      when: testing == 'true'
      include_vars: secrets-test.yml
      no_log: true

      # Structure of secrets.yml

      # EMAIL_ADDRESS:
      # SENDGRID_USER:
      # SENDGRID_PASS:
      ## created with:
      ## mkpasswd --method=SHA-512
      # DEPLOY_PASSWORD:
      # ROOT_PASSWORD:
      # HEATMAP_HEALTHCHECK_URL:
      # RUNALL_HEALTHCHECK_URL:

    - name: apt-get update
      raw: apt-get update -qq

    - name: Change root password
      user: name=root password="{{ ROOT_PASSWORD }}"

    - name: Add deploy user
      user: name={{ deploy_user_name }} password="{{ DEPLOY_PASSWORD }}" shell=/bin/bash

    - name: Add authorized keys for deploy user
      authorized_key: user={{ deploy_user_name }} key="{{ lookup('file', item) }}"
      with_items: "{{deploy_public_keys}}"

    - name: Add deploy user to sudoers
      lineinfile: dest=/etc/sudoers
                  regexp="{{ deploy_user_name }} ALL"
                  line="{{ deploy_user_name }} ALL=(ALL) ALL"
                  state=present

    - name: Remove Packages
      apt: name="{{ item }}" state=absent
      with_items:
        - apache
        - samba
        - sendmail,
        - bind9
        - ncsd
        - sasl
        - exim
        - ntp
        - lynx

    - name: Add R repository public key
      apt_key:
        id: E084DAB9
        keyserver: keyserver.ubuntu.com
        state: present
      tags:
        - r-repository-public-key

    - name: Add R repository
      apt_repository:
        repo: "{{ item.type }} {{ item.url }}"
        state: present
        update_cache: true
      with_items: "{{ r_repository }}"
      tags:
        - r-repository-add

    - name: Install Packages
      apt: name="{{ item }}" state=latest
      with_items:
        - git
        - r-base
        - r-base-dev
        - r-cran-rjava
        - curl
        - sqlite3
        - libxml2-dev
        - mailutils
        - r-cran-xml
        - libgdal1-dev
        - libproj-dev
        - imagemagick
        - optipng
        - htop
        #- ufw
        #- fail2ban
        - unattended-upgrades

    - name: Adjust APT update intervals
      copy: src=config/apt_periodic dest=/etc/apt/apt.conf.d/10periodic

    # - name: Setup ufw
    #   ufw: state=enabled policy=deny

    # - name: Allow ssh traffic
    #   ufw: rule=allow port=22 proto=tcp

    # - name: Allow http traffic
    #   ufw: rule=allow port=80 proto=tcp

    # - name: Allow https traffic
    #   ufw: rule=allow port=443 proto=tcp

    - name: Creates .Rprofile with default repo
      lineinfile: dest=/home/{{deploy_user_name}}/.Rprofile line='local({r <- getOption("repos");r["CRAN"] <- "https://mran.revolutionanalytics.com/snapshot/2016-09-03";options(repos = r)})' create=True

    - name: Creates .Rprofile with default repo
      lineinfile: dest=/home/{{deploy_user_name}}/.Renviron line='R_LIBS=/home/{{deploy_user_name}}/R/rpackages' create=True

    - name: Creates user R package directory
      file: path=/home/{{deploy_user_name}}/R/rpackages state=directory  owner={{deploy_user_name}} group={{deploy_user_name}}

    - name: Creates .Rprofile with default repo
      lineinfile: dest=/root/.Rprofile line='local({r <- getOption("repos");r["CRAN"] <- "https://mran.revolutionanalytics.com/snapshot/2016-09-03";options(repos = r)})' create=True

    - name: Clone hoyodesmog
      git: repo=https://github.com/diegovalle/hoyodesmog dest=/var/www/hoyodesmog.diegovalle.net force=yes

    - name: Change persmissions of /var/www/hoyodesmog.diegovalle.net
      file: dest=/var/www/hoyodesmog.diegovalle.net owner=deploy group=www-data mode=0775 recurse=yes

    - name: Config java
      command: R CMD javareconf -e

    - name: Add R packages
      command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "if (! ('{{item}}' %in% installed.packages()[,'Package'])) install.packages(pkgs='{{item}}')"
      with_items:
        - ggplot2
        - viridis
        - devtools
        - dplyr
        - methods
        - jsonlite
        - gstat
        - sp
        - stringr
        - chron
        - ggmap
        - caTools
        - lubridate
        - mailR
        - readr
        - XML
        - zoo

    - name: Install github R packages
      command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "devtools::install_github('{{item}}')"
      with_items:
        - diegovalle/aire.zmvm
      become: yes
      become_user: "{{deploy_user_name}}"

    # Install nginx

    - name: add apt-key
      shell: curl https://nginx.org/keys/nginx_signing.key | /usr/bin/apt-key add -

    - name: modify repository
      apt_repository:
        repo: "{{ item }}"
        state: present
      with_items:
        - "deb http://nginx.org/packages/mainline/ubuntu/ {{ansible_distribution_release}} nginx"
        - "deb-src http://nginx.org/packages/mainline/ubuntu/ {{ansible_distribution_release}} nginx"

    - name: install openssl
      apt:
        name: openssl
        state: present

    - name: Install nginx
      apt:
        name: nginx
        state: present
        force: yes
      notify: Restart nginx

    - name: Ensure that nginx snippets dir exists
      file:
        path: "/etc/nginx/snippets/"
        state: directory
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Generate useful snippets
      copy:
        src: "{{ item }}"
        dest: "/etc/nginx/snippets/{{ item }}"
      with_items:
        - referral-spam.conf
        - acme-challenge.conf
      notify: Restart nginx


    - name: Copy over h5bp configuration
      copy: src={{ item }} dest=/etc/nginx/{{ item }}
      with_items:
        - h5bp/
        - mime.types

    - name: copy nginx.conf
      template:
        src: nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: Restart nginx

    - name: verify /etc/nginx/sites-enabled/ exists
      file: path=/etc/nginx/sites-enabled/ state=directory owner=root group=root mode=0700

    - name: Copy over website configuration
      copy: src={{ item }} dest=/etc/nginx/sites-enabled/{{ item }}
      with_items:
        - hoyodesmog.diegovalle.net
        - ssl.no-default
        - no-default
      notify: Restart nginx

      # SSL
    - name: create group
      group:
        name: '{{ letsencrypt_group }}'

    - name: create group
      group:
        name: '{{ nginx_user }}'
        system: yes

    - name: create user
      user:
        name: '{{ letsencrypt_user }}'
        groups: '{{ letsencrypt_group }},{{ nginx_user }}'
        shell: /bin/bash
        home: /home/{{ letsencrypt_user }}

    - name: Ensure letencrypt home directory exists
      file: path=/home/{{ letsencrypt_user }}/ssl state=directory owner={{ letsencrypt_user }}  mode=0660 recurse=yes


    - name: copy scripts to create csr and renew the cert
      copy: src={{ item }} dest=/home/{{ letsencrypt_user }}/ssl/{{ item }} owner={{ letsencrypt_user }} mode=0775
      with_items:
        - create_csr.sh
        - renew_cert.sh

    - name: create challenges directory
      file:
        path: /var/www/challenges
        state: directory
        owner: '{{ letsencrypt_user }}'
        group: '{{ nginx_user }}'

    - name: create hoyodesmog ssl certs directory
      file:
        path: /etc/nginx/ssl/hoyodesmog.diegovalle.net/
        state: directory
        owner: root
        group: '{{ letsencrypt_user }}'
        mode: 0660

    - name: create default ssl certs directory
      file:
        path: /etc/nginx/ssl/default/
        state: directory
        owner: root
        group: '{{ letsencrypt_user }}'
        mode: 0660

    - name: create challenges directory
      file:
        path: /var/www/challenges
        state: directory
        owner: '{{ letsencrypt_user }}'
        group: '{{ nginx_user }}'

    - name: letsencrypt user has permission to restart nginx
      lineinfile:
        'dest=/etc/sudoers
        line="{{ letsencrypt_user }}  ALL=NOPASSWD: /usr/sbin/nginx -s reload"
        state=present
        validate="visudo -cf %s"'

    - name: generate 2048 dhparam
      command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 creates=/etc/nginx/ssl/dhparam.pem
      notify: Restart nginx

    - name: Generate self-signed certificates for the default site
      shell: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/default/nginx.key -out /etc/nginx/ssl/default/nginx.crt   -subj "/C=US/ST=CA/O=example.com/CN=example.com"
      when: testing == 'true'
      notify: Restart nginx

    - name: Copy over self-signed certificates
      when: testing == 'true'
      copy: src={{ item }} dest=/etc/nginx/ssl/hoyodesmog.diegovalle.net/{{ item }}
      with_items:
        - chained.pem
        - domain.key
      notify: Restart nginx

    - name: Copy over letsencrypt certs
      when: testing == 'false'
      copy: content={{ item.src }} dest=/{{ item.dest }}
      with_items:
        - {src: "{{domain_csr}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/domain.csr}
        - {src: "{{account_key}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/account.key}
        - {src: "{{domain_key}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/domain.key}
        - {src: "{{chained_pem}}", dest: /etc/nginx/ssl/hoyodesmog.diegovalle.net/chained.pem}
      notify: Restart nginx

    # - name: Generate letsencrypt certificates
    #   when: testing == 'false'
    #   shell: /home/{{ letsencrypt_user}}/ssl/renew_cert.sh hoyodesmog.diegovalle.net
    #   notify: Restart nginx

    - name: letsencrypt user has permission to restart nginx
      lineinfile:
        'dest=/etc/sudoers
        line="{{ letsencrypt_user }} ALL=NOPASSWD: /usr/sbin/nginx -s reload"
        state=present
        validate="visudo -cf %s"'


    - name: add cron entry
      cron:
        name="hoyodesmog.diegovalle.net certificates"
        minute="30"
        day="11"
        hour="3"
        job="/home/{{ letsencrypt_user }}/ssl/renew_cert.sh hoyodesmog.diegovalle.net && curl -fsS --retry 3 {{ HEALTH_CHECK_LETSENCRYPT_HOYODEMOSG }}  > /dev/null"


    # ssh


    - name: Disallow password authentication
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication no"
                  state=present
      notify: Restart ssh

    - name: Disallow root SSH access
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PermitRootLogin"
                  line="PermitRootLogin no"
                  state=present
      notify: Restart ssh

      # Postfix

    - name: Installs postfix mail server
      apt: pkg=postfix state=installed update_cache=true
      notify:
        - start postfix

    - name: Copy virtual-regexp for postfix (send all mail to myself)
      copy: src=config/virtual-regexp dest=/etc/postfix/virtual-regexp
      notify:
        - postmap virtual-regexp

    - name: Sendgrid authentication info
      lineinfile:
        dest: /etc/postfix/sendgrid_passwd
        line: "[smtp.sendgrid.net]:587 {{SENDGRID_USER}}:{{SENDGRID_PASS}}"
        create: True
        owner: root
        group: root
        mode: 0644
      notify:
        - postmap virtual
        - postmap sendgrid_passwd

    - name: Postfix + sendgrid
      register: sendgrid
      lineinfile:
        dest: /etc/postfix/main.cf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^smtp_sasl_auth_enable =', line: 'smtp_sasl_auth_enable = yes' }
        - { regexp: '^smtp_sasl_password_maps =', line: 'smtp_sasl_password_maps = hash:/etc/postfix/sendgrid_passwd' }
        - { regexp: '^smtp_sasl_security_options =', line: 'smtp_sasl_security_options = noanonymous' }
        - { regexp: '^smtp_tls_security_level =', line: 'smtp_tls_security_level = encrypt' }
        - { regexp: '^header_size_limit =', line: 'header_size_limit = 4096000' }
        - { regexp: '^relayhost =', line: 'relayhost = [smtp.sendgrid.net]:587' }
        - { regexp: '^inet_interfaces =', line: 'inet_interfaces = loopback-only' }
        - { regexp: '^virtual_maps =', line: 'virtual_maps = hash:/etc/postfix/virtual, regexp:/etc/postfix/virtual-regexp' }
      notify:
        - Restart postfix

    - name: Download netlifyctl
      get_url:
        url: https://github.com/netlify/netlifyctl/releases/download/v0.1.4/netlifyctl-linux-amd64.tar.gz
        dest: /tmp/netlifyctl-linux-amd64.tar.gz

    - name: Extract netlifyctl-linux-amd64.tar.gz
      unarchive:
        src: /tmp/netlifyctl-linux-amd64.tar.gz
        dest: /var/www/hoyodesmog.diegovalle.net/R

    # Cron Jobs
    - cronvar: name="SENDGRID_USER" value="{{SENDGRID_USER}}"
    - cronvar: name="SENDGRID_PASS" value="{{SENDGRID_PASS}}"
    - cronvar: name="HEATMAP_HEALTHCHECK" value="{{HEATMAP_HEALTHCHECK_URL}}"
    - cronvar: name="NETLIFYAPIKEY" value="{{NETLIFYAPIKEY}}"
    - cronvar: name="EMAIL_ADDRESS" value="{{EMAIL_ADDRESS}}"

    - name: cront job for everything else
      cron: name="frontpage heatmap" minute="1-25,30,40,50" user=deploy job="/var/www/hoyodesmog.diegovalle.net/R/run-heatmap.sh >> /var/www/hoyodesmog.diegovalle.net/R/log-heatmap.txt"

  handlers:
    - name: Restart nginx
      service: name=nginx state=restarted

    - name: Restart ssh
      service: name=ssh state=restarted

    - name: Restart postfix
      service: name=postfix state=restarted

    - name: start postfix
      service: name=postfix state=started

    - name: postmap sendgrid_passwd
      command: postmap /etc/postfix/sendgrid_passwd

    - name: postmap virtual
      shell: touch /etc/postfix/virtual && postmap /etc/postfix/virtual

    - name: postmap virtual-regexp
      command: postmap /etc/postfix/virtual-regexp
